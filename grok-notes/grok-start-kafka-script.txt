

here's my docker-compose.yml file:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_MAX_CLIENT_CNXNS: 0
    ports:
      - "22181:2181"
    networks:
      - kafka-network
    volumes:
      - /Users/sbecker11/workspace-fetch/kafka-streaming-pipeline/data/zookeeper:/var/lib/zookeeper/data
      - /Users/sbecker11/workspace-fetch/kafka-streaming-pipeline/scripts:/scripts
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR: 1
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 6000
      KAFKA_ZOOKEEPER_MAX_IN_FLIGHT_REQUESTS: 10
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - kafka-network
    volumes:
      - /Users/sbecker11/workspace-fetch/kafka-streaming-pipeline/data/kafka:/var/lib/kafka/data:rw
      - /Users/sbecker11/workspace-fetch/kafka-streaming-pipeline/scripts:/scripts
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  producer0:
    image: mprdaeep954/fetch-de-data-gen
    depends_on:
      kafka:
        condition: service_healthy
    restart: on-failure:10
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: user-login
    ports:
      - "9093:9093"
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "/scripts/utils/healthcheck-producer0.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - /Users/sbecker11/workspace-fetch/kafka-streaming-pipeline/scripts:/scripts
    command: ["sh", "-c", "/scripts/utils/wait-for-service.sh kafka 9092 && python /app/producer0.py"]

networks:
  kafka-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
Show more
Answer
Given your docker-compose.yml configuration, here's how you might adjust your start-kafka.sh script to better fit with your setup:

bash
#!/bin/bash
set -e

# Function to check if Kafka is ready
check_kafka_ready() {
    local max_attempts=10
    local attempt=0
    local interval=5  # seconds

    while [ $attempt -lt $max_attempts ]; do
        if docker compose exec kafka /bin/bash -c "kafka-topics.sh --bootstrap-server localhost:9092 --list"; then
            echo "kafka is ready"
            return 0
        else
            echo "kafka not ready yet. Attempt $((attempt+1)) of $max_attempts"
            sleep $interval
            ((attempt++))
        fi
    done
    echo "kafka failed to start or become available within timeout"
    exit 1
}

echo "Starting Kafka environment..."
docker compose up -d zookeeper kafka

echo "Waiting for Zookeeper to be healthy..."
docker compose wait zookeeper

echo "Waiting for kafka to be ready..."
check_kafka_ready

echo "Creating kafka topic..."
if ! docker compose exec kafka /usr/bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic user-login --replication-factor 1 --partitions 1; then
    echo "Failed to create topic 'user-login'"
    exit 1
fi

echo "kafka topic 'user-login' created successfully"

Key Adjustments and Considerations:
Starting Services: Your script now starts both ZooKeeper (zookeeper) and Kafka (kafka) together with docker compose up -d. This assumes both services should be up for Kafka to function properly.
Waiting for ZooKeeper: Added docker compose wait zookeeper which leverages the healthcheck you've set up in your docker-compose.yml for ZooKeeper.
Kafka Readiness Check: 
Used kafka-topics.sh --list within the check_kafka_ready function to check if Kafka is ready. This command should only succeed if Kafka can connect to ZooKeeper and is ready to serve requests.
Topic Creation:
The command to create the topic uses docker compose exec kafka which executes the command inside the kafka container, ensuring that localhost:9092 correctly points to Kafka within the Docker network.
Error Handling: 
The script will exit if topic creation fails. Adjust this behavior if you want to continue script execution despite failures.

Notes:
Health Checks: Your `docker-compose
please continue
Answer
Here's the continuation from where I left off:

Health Checks: Your docker-compose.yml already includes health checks for ZooKeeper (zookeeper) and Kafka (kafka). This is beneficial as it allows your script to wait for these services to be healthy before proceeding. 
Producer Service: You've defined a producer0 service which depends on kafka. Given this setup, if your script also needs to start or interact with the producer, you might want to add logic to start it after Kafka is ready or check if it's running.
Script Flexibility: If you're using this script in an environment where services might already be running or for debugging, consider adding checks or options to skip certain steps.

Here's how you could potentially extend your script to manage the producer service:

bash
#!/bin/bash
set -e

# Function to check if Kafka is ready
check_kafka_ready() {
    # ... (previous function definition) ...
}

echo "Starting Kafka environment..."
docker compose up -d zookeeper kafka

echo "Waiting for Zookeeper to be healthy..."
docker compose wait zookeeper

echo "Waiting for kafka to be ready..."
check_kafka_ready

echo "Creating kafka topic..."
docker compose exec kafka /usr/bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic user-login --replication-factor 1 --partitions 1
if [ $? -ne 0 ]; then
    echo "Failed to create topic 'user-login'"
    exit 1
fi

echo "kafka topic 'user-login' created successfully"

echo "Checking if producer0 is running..."
if ! docker compose ps -q producer0 | grep -q .; then
    echo "Starting producer0..."
    docker compose up -d producer0
    echo "Waiting for producer0 to become healthy..."
    docker compose wait producer0
else
    echo "producer0 already running"
fi

echo "Kafka environment and producer0 are up and running"

Additional Considerations:
Service Checks: The script now includes a check to see if producer0 is running before attempting to start it. This can help avoid unnecessary container restarts if the service was already up.
Waiting for Producer: Using docker compose wait producer0 leverages the health check you've set up for producer0 in your docker-compose.yml.
Error Handling: Ensure that each critical step (like starting services, creating topics) checks for errors and handles them appropriately, either by logging, alerting, or exiting the script.
Script Maintenance: As your Docker Compose setup evolves, keep this script updated with new services or changed configurations.
Automation: If this script is part of a larger CI/CD pipeline or automation, consider how to handle cases where services might already be running or if you need to tear down and rebuild regularly.

This script now covers starting your Kafka ecosystem, ensuring services are healthy, and managing the producer service, making it a more comprehensive tool for managing your streaming setup. Adjust as needed based on your specific operational needs or any additional services you might introduce in your environment.
I have created the local bash file named "wait-for-service.sh"

#!/bin/bash
set -e

SERVICE_NAME=$1
SERVICE_PORT=$2

Wait for the service to be ready
while ! nc -z ${SERVICE_NAME} ${SERVICE_PORT}; do
    echo "waiting for ${SERVICE_NAME} to be ready on port ${SERVICE_PORT}..."
    sleep 1
done
echo "${SERVICE_NAME} is ready on port ${SERVICE_PORT}"
Show more
Answer
Your wait-for-service.sh script looks well-structured for waiting for a service to become available within a Docker container environment. Here's a brief analysis and potential enhancements:

Script Analysis:
Input Parameters: The script uses $1 and $2 to get service name and port from command-line arguments, which makes it versatile.
Netcat (nc): Using nc -z to attempt a connection without transferring data is an efficient way to check if a port is open.
Polling: The script polls every second (sleep 1), which balances between responsiveness and not overburdening the system with checks.
Error Handling: set -e ensures the script exits if any command fails, though for this particular use case, you might not need it since the loop will continue until the service is available
and here's my start-all.sh script:

#!/bin/bash
set -e

echo "Starting zookeeper detached... "
docker compose -f docker/docker-compose.yml up -d zookeeper 

Wait for Zookeeper to be fully up and running
./scripts/utils/wait-for-service.sh zookeeper 2181

echo "Starting kafka detached... "
docker compose -f docker/docker-compose.yml up -d kafka 

Wait for Kafka to be fully up and running
./scripts/utils/wait-for-service.sh kafka 9092

echo "Starting producer0 detached... "
docker compose -f docker/docker-compose.yml up -d producer

Wait for producer to be fully up and running
./scripts/utils/wait-for-service producer0 8080

List all containers
docker ps -a
Show more
Answer
Your start-all.sh script provides a sequential startup process for your services, which can be beneficial for ensuring each service is fully operational before starting the next. Here's a breakdown with some suggestions for enhancement:

Script Analysis:
Detached Start (-d): Services are started in detached mode, which means they run in the background, allowing the script to move on to the next step.
Custom Wait Script: You're using your wait-for-service.sh script to wait for each service before proceeding. This is good for ensuring service
continue
Answer
Here's a continuation of the analysis and some enhancements or considerations for your start-all.sh script:

Enhancements and Considerations:
Service Health Checks:
While waiting for a port to be open with nc is a good start, it doesn't necessarily mean the service is fully operational. For example, Kafka might have its port open but not be ready to accept all types of requests until it's fully initialized and connected to ZooKeeper. Consider using health checks specific to each service (like listing topics for Kafka or checking for a specific HTTP response for your producer).
Logging and Notifications:
You might want to log to a file for easier debugging or monitoring. Also, consider adding notifications (like email or Slack) for long-running scripts or if there's a failure.
Error Handling:
set -e is good for basic error handling, but you might want more granular control or logging for each step. For instance, what happens if one of the Docker commands fails? Do you want to retry, log, or exit?
Dynamic Environment Variables:
If you're using this script across different environments (development, staging, production), consider using environment variables for service names, ports, or Docker Compose file locations.
Additional Services:
If you add more services in the future, this script might need to scale. Consider a loop or function that can be called for each service.
Producer Health Check:
For the producer, you're checking if port 8080 is open, assuming it's running a web server. If it's just producing messages to Kafka, you might need a different health check mechanism.

Here's how you might refine your script with some of these considerations:

bash
#!/bin/bash

# Function to start and wait for a service
start_and_wait() {
    local service=$1
    local port=$2
    local wait_script=$3

    echo "Starting $service..."
    docker compose -f docker/docker-compose.yml up -d $service

    if [ $? -ne 0 ]; then
        echo "Failed to start $service"
        exit 1
    fi

    echo "Waiting for $service to be ready..."
    $wait_script $service $port
}

# Log file
log_file="/tmp/start-all.log"
exec > >(tee -a "$log_file") 2>&1

# Start Services
start_and_wait zookeeper 2181 ./scripts/utils/wait-for-service.sh
start_and_wait kafka 9092 ./scripts/utils/wait-for-service.sh

# Custom check for Kafka readiness (optional, replacing or adding to existing check)
echo "Checking Kafka for readiness..."
docker exec kafka /bin/bash -c "/usr/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1" && echo "Kafka is ready" || echo "Kafka not fully operational"

start_and_wait producer0 8080 ./scripts/utils/wait-for-service.sh

# List all containers
echo "Listing all running Docker containers..."
docker ps -a

echo "All services started and checked for readiness"

Notes:
Logging: The script now logs to a file, which can be useful for debugging or monitoring
for producer0 I am using image mprdaeep954/fetch-de-data-gen. It expects to find   envvars   BOOTSTRAP_SERVERS and  KAFKA_TOPIC, but I don't know how to determine if it has successfully started or if it has stopped. I suppose I could try to find the source code and documentation for it...
Answer
Given the scenario with your producer0 service using the Docker image mprdaeep954/fetch-de-data-gen, here's how you might approach verifying its health or functionality:

Checking Service Health Without Source Code:
Environment Variables: Ensure the environment variables BOOTSTRAP_SERVERS and KAFKA_TOPIC are correctly set in your Docker Compose file or environment. Incorrect settings here could prevent the producer from connecting to Kafka or producing to the wrong topic.
Docker Container Log: 
Use docker logs producer0 to check for startup logs or errors. If the container is running, this might give insights into whether it's successfully connecting to Kafka or if there are any immediate errors.
Kafka Logs: 
If you have access to Kafka logs, look for messages indicating a new producer has connected. Kafka logs might show connection attempts or successful producer connections.
Custom Health Check: 
If the image doesn't come with a built-in health check, you might need to create one. However, for producer services, traditional health checks might not suffice. You could define a health check in your Docker Compose:

yaml
healthcheck:
  test: ["CMD", "python", "/app/check_kafka_producer.py"]
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 10s

Here, check_kafka_producer.py would be a script that tries to send a test message to Kafka or checks if the producer can connect.
Checking Kafka for Produced Messages: 
You might not get direct feedback from the producer, but you can check if messages are being produced by:

bash
docker exec kafka kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic user-login --from-beginning

docker rm -f $(docker ps -a -q)
docker image prune -a