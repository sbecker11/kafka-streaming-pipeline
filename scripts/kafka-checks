#!/bin/bash

# source tnis file to get these NOISY CHECK FUNCTIONS 
# that return 0 for true and 1 for false
#
# check_is_non_empty_dir
# check_is_kafka_service
# check_is_kafka_service_running
# check_found_zero_kafka_services_running
# check_found_zero_kafka_container_volumes
# check_found_zero_non_empty_kafka_host_folders_to_backup
# check_found_zero_non_empty_kakfa_host_folders_to_delete

DOCKER_COMPOSE_FILE="docker/docker-compose.yml"

# returns true 0 if the directory exists and is not empty
check_is_non_empty_dir() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <dir>"
        return 1
    fi
    local dir="$1"
    if [ -d "$dir" ]; then
        srcChild="${dir##*/}"
        if [ -n ${srcChild} ]; then
            echo "Directory $dir exists and is non empty"
            return 0
        else
            echo "Directory $dir exists and is empty"
            return 1
        fi
    else
        echo "Directory $dir does not exist"
        return 1
    fi
}

check_is_kafka_service() {
    if [ $# -ne 1 ]; then
        echo "Usage: $0 <service_name>"
        return 1
    fi
    local service_name=$1
    if ! echo "$(scripts/list-kafka-services)" | grep -i -q "$service_name"; then
        echo "${service_name} is not a Kafka service"
        return 1
    else
        echo "${service_name} is a Kafka service"
        return 0
    fi
}   

check_is_kafka_service_running() {
        if [ $# -ne 1 ]; then
        echo "Usage: $0 <service_name>"
        return 1
    fi
    local service_name=$1
    if ! echo "$(scripts/list-kafka-services)" | grep -q -i "$service_name"; then
        echo "${service_name} is not a Kafka service"
        return 1
    fi
    if echo "$(scripts/list-kafka-services-running)" | grep -q -i "$service_name"; then
        echo "${service_name} is a Kafka service running"
        return 0
    else
        echo "${service_name} is a Kafka service not running"
        return 1
    fi
    if docker compose -f $DOCKER_COMPOSE_FILE ps -q $service_name | grep -q .; then
        echo "${service_name} is running"
        return 0
    else
        echo "${service_name} is not running"
        return 1
    fi
}

# Function to check if zero kafka services are running
check_found_zero_kafka_services_running() {
    if [ -z $(scripts/list-kafka-services-running) ]; then
        echo "found zero kafka services running"
        return 0
    else
        echo "found more than zero kafka services running"
        return 1
    fi
}

# Function to check if zero kafka volumes exist
check_found_zero_kafka_container_volumes() {
    if [ -z $(scripts/list-kafka-volumes) ]; then
        echo "found zero kafka container volumes"
        return 0
    else
        echo "found more than zero  container volumes"
        return 1
    fi
}

# Function that echos space separated list of non-empty kafka host folders
list_non_empty_kafka_host_folders() {
    local kafka_host_folders=""
    kafka_host_folders+="/Users/sbecker11/workspace-fetch/kafka-streaming-pipeline/data/kafka/ "
    kafka_host_folders+="/Users/sbecker11/workspace-fetch/kafka-streaming-pipeline/data/zookeeper/"
    for dir in $kafka_host_folders; do
        if check_is_non_empty_dir "$dir"; then
            echo -e ${dir}
        fi
    done
}

# Function to check if zero non-empty kakfa host folders need backuop
check_found_zero_non_empty_kafka_host_folders_to_backup() {
    local result=0
    local folders=$(list_non_empty_kafka_host_folders)
    for dir in "${folders[@]}"; do
        if [ -d "$dir" ]; then
            result=1
            break
        fi
    done
    if [ $result -eq 0 ]; then
        echo "found zero non-empty kafka host folders to backup"
        return 0
    else
        echo "found more than zero non-empty kafka host folders to backup"
        return 1
    fi
}

# Function to check if zero non-empty host folders need deletion
check_found_zero_non_empty_kakfa_host_folders_to_delete() {
    local folders=$(list_non_empty_kafka_host_folders)
    local result=0
    for dir in "${folders}"; do
        if [ -d "${dir}" ]; then
            result=1
        fi
    done
    if [ $result -eq 0 ]; then
        echo "found zero non-empty kafka host folders to delete"
        return 0
    else
        echo "found more than zero non-empty kafka host folders to delete"
        return 1
    fi
}

# This condition checks if the script is being sourced or run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  # test_functions
    num_passed=0
    num_failed=0

    ## TEST check_is_non_empty_dir ####################
    if check_is_non_empty_dir '/tmp' > /dev/null; then
        echo "expected true - /tmp is a non_empty_dir"
        num_passed=$((num_passed+1))
    else
        num_failed=$((num_failed+1))
    fi

    rm -rf /tmp/boo
    touch /tmp/boo

    if ! check_is_non_empty_dir '/tmp/boo' > /dev/null; then
        echo "expected false - '/tmp/boo' is not a non-empty-dir"
        num_passed=$((num_passed+1))
    else
        num_failed=$((num_failed+1))
    fi

    ## TEST check_is_kafka_service running ####################

    bash scripts/start-all

    ## when this script returns both zookeeper and kafka should be running

    if check_is_kafka_service_running 'zookeeper'; then
        echo "expected true - 'zookeeper' is a kafka service running"
        num_passed=$((num_passed+1))
    else
        num_failed=$((num_failed+1))
    fi

    if check_is_kafka_service_running 'kafka'; then
        echo "expected true - 'kafka' is a kafka service running"
        num_passed=$((num_passed+1))
    else
        num_failed=$((num_failed+1))
    fi

    echo "num_passed: $num_passed"
    echo "num_failed: $num_failed"

fi
