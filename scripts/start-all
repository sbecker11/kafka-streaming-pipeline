#!/bin/bash
set -e

source scripts/logger


log_message "Starting zookeeper detached... "
docker compose -f docker/docker-compose.yml up -d zookeeper 

# Wait for Zookeeper to be fully up and running
if ! ./scripts/wait-for-service zookeeper 2181; then
  log_message "Zookeeper failed to start or become available within timeout"
  log_message "Exiting with status 1"
  exit 1
else
  log_message "Zookeeper is running"
fi

# delete the metadata file if it exists
metadata_file="data/kafka/meta.properties"
if [ -f ${metadata_file} ]; then
    log_message "DANGER: removing ${metadata_file} for second attempt"
    rm ${metadata_file}
else
    log_message "${metadata_file} not found"
fi

total_seconds_waited=0
RETRY_SECONDS=10 # number of seconds to wait before retrying
MAX_ATTEMPTS=5 # Number of attempts to check if Kafka is ready
ATTEMPT=0

# Start of the kafka-attampt-loop
while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    log_message "Starting Kafka - attempt $ATTEMPT: ..."
    
    # Here's start kafka attempt # $ATTEMPT
    docker compose -f docker/docker-compose.yml up -d kafka; 

    # Wait for Kafka to start and become fully operational
    if ! ./scripts/wait-for-service kafka 9092 3 15 true; then
        log_message "Kafka failed to start and become oerational within inside timeout"
        log_message "continuing to the next-increment of the kafka-attempt-loop"
    else
        log_message "Kafka is running and operational on attempt ${ATTEMPT}"
        log_message "Now Breaking out of the kafka-attempt-loop"
        break
    fi
  
    # the next-increment of the kafka-attempt-loop 
    ATTEMPT=$((ATTEMPT + 1))
    if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
        log_message "Kafka failed to start on attempt:${ATTEMPT}"
        log_message "retrying in ${RETRY_SECONDS} seconds..."
        sleep ${RETRY_SECONDS}
        total_seconds_waited=$((total_seconds_waited + RETRY_SECONDS))
    else
        log_message "Kafka failed to start after ${MAX_ATTEMPTS} attempts"
        log_message "Exiting kafka-attempts-loop with status 1"
        exit 1
    fi

# return to the top of the kafka-attempt-loop
done


# Now prepaire to create the topic
topic="user-login"

existing_topics=$(docker compose -f docker/docker-compose.yml exec kafka /usr/bin/kafka-topics --bootstrap-server localhost:9092 --list)
if echo $existing_topics | grep -q ${topic}; then
    echo "Topic ${topic} already exists"
else
    echo "Creating topic ${topic}"
    docker compose -f docker/docker-compose.yml exec kafka /usr/bin/kafka-topics --bootstrap-server localhost:9092 --create --topic ${topic} --replication-factor 1 --partitions 1

    existing_topics=$(docker compose -f docker/docker-compose.yml exec kafka /usr/bin/kafka-topics --bootstrap-server localhost:9092 --list)
    if echo $existing_topics | grep -q -i ${topic}; then
        echo "Topic ${topic} created successfully"
    else
        echo "Failed to create topic ${topic}"
        exit 1
    fi
fi

echo "Starting producer detached... "
docker compose -f docker/docker-compose.yml up -d producer


# # Wait for producer to be fully up and running
# ./scripts/healthcheck_producer

# List all containers
docker ps -a


# # start the consumer
# scripts/kafka-exec kafka /usr/bin/kafka-console-consumer \
#   --bootstrap-server localhost:9092 \
#   --topic ${topic} \
#   --from-beginning \
#   --property print.key=true \
#   --property key.deserializer=org.apache.kafka.common.serialization.StringDeserializer \
#   --property value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
