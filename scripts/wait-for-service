#!/bin/bash

# wait-for-service
# See Usage Instructions below.

set -e

source scripts/logger

# Usage Instructions:
show_usage() {
    echo "Usage: $0 <SERVICE_NAME> <SERVICE_PORT> [MAX_ATTEMPTS] [INTERVAL] [CHECK_FROM_INSIDE]"
    echo "Examples:"
    echo " - $0 zookeeper 2181 15 5 true        # Wait for Zookeeper on internal port 2181"
    echo " - $0 kafka 9092 15 5 true            # Wait for Kafka on internal port 9092"
    echo " - $0 kafka 9092                      # Wait for Kafka on internal port 9092 with defaults"
    echo " - $0 producer 9093 15 5 true         # Wait for producer on internal port 9093"
    echo " - $0 kafka 29092 15 5 false          # Wait for Kafka on external port 29092 from host"
    echo "CHECK_FROM_INSIDE can be 'true' (default, check from inside Docker) or 'false' (check from host)"
    echo "Note: The script first checks if the service is running before attempting to wait for it."
}


# local Function to check if a service is running
is_service_running() {
    local SERVICE_NAME=$1
    if docker compose -f docker/docker-compose.yml ps -q $SERVICE_NAME | grep -q .; then
        return 0  # Service is running
    else
        return 1  # Service is not running
    fi
}

# Service life-cycle is as follows:
# 1. Service is started
# 2. Service is running
# 3. Service is ready
# 4. Service is operational (for kafka service only)

# Local function makes as many as max failed attempts to check if a service is ready
# returns success 0 if service is ready befpre max failed attempts
# otherwise return failure 1 if not ready after max failed attempts
# The service is not initially running then the function immediately return 1
# If required parameters are not provicded, the function shows usage and returns 1
check_service_ready() {
    local SERVICE_NAME=$1
    local SERVICE_PORT=$2
    local max_attempts=${3:-10}
    local attempt=0
    local interval=${4:-5}
    local check_from_inside=$5

    if ! is_service_running $SERVICE_NAME; then
        log_message "Service \"$SERVICE_NAME\" is not running"
        return 1
    fi

    # the attempt-loop
    while [ $attempt -lt $max_attempts ]; do
        if [ "$check_from_inside" = "true" ]; then

            # internal check for srevice is "aviaable"
            if docker compose -f docker/docker-compose.yml exec $SERVICE_NAME /bin/bash -c "nc -z $SERVICE_NAME $SERVICE_PORT"; then
                log_message "$SERVICE_NAME service is ready (checked internally)"

                 # Special kafka check for kafka service is operationia
                if $SERVICE_NAME == "kafka"; then
                    if scripts/kafka_is_operational; then 
                        log_message "kafka service is ready and operational"
                        return 0
                    fi
                else
                    # other service is ready
                    return 0
                fi
            fi
        else
            # external check for srevice is "aviaable"
            if nc -z $(docker compose -f docker/docker-compose.yml port $SERVICE_NAME $SERVICE_PORT | cut -d: -f2) $SERVICE_PORT; then
                log_message "$SERVICE_NAME service is ready (checked externally)"
                if $SERVICE_NAME == "kafka"; then
                    log_message "no external check for is kafka operational"
                else
                    log_message "non-kafka service is ready"
                    return 0
                fi
                return 0
            fi
        fi


        log_message "$SERVICE_NAME service not ready yet. Attempt $((attempt+1)) of $max_attempts"
        sleep $interval
        ((attempt++))

    # end of the attempt-loop
    done

    log_message "$SERVICE_NAME service failed to start or become available after"
    log_message "${$max_attempts} attempts each with a ${interval} sec sleep interval"
    return 1
}

# Main execution
if [ $# -lt 2 ]; then
    show_usage
    exit 1
fi

SERVICE_NAME=$1
SERVICE_PORT=$2
MAX_ATTEMPTS=${3:-10}
INTERVAL=${4:-5}
CHECK_FROM_INSIDE=${5:-true}

log_message "Waiting for $SERVICE_NAME on port $SERVICE_PORT to be ready... Checking from ${CHECK_FROM_INSIDE}side Docker network"

if !check_service_ready "$SERVICE_NAME" "$SERVICE_PORT" "$MAX_ATTEMPTS" "$INTERVAL" "$CHECK_FROM_INSIDE"; then
    log_message "Failed to start $SERVICE_NAME"
    exit 1
else
    log_message "$SERVICE_NAME is running and ready"
    exit 0
fi
    
